import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
import QRCode from 'qrcode';
import { AuthContext } from '../../Context/AuthContext';
import QRCodePopup from '../../components/QRCodePopup/QRCodePopup';
import RegisteredEventCard from '../../components/RegisteredEventCard/RegisteredEventCard';
import './RegisteredEventsPage.css'; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå CSS

const RegisteredEventsPage = () => {
  const { user, token } = useContext(AuthContext);
  const [events, setEvents] = useState([]);
  const [selectedTicketId, setSelectedTicketId] = useState(null);
  const [selectedEventId, setSelectedEventId] = useState(null);
  const [qrCodeUrl, setQrCodeUrl] = useState('');
  const [showQRCode, setShowQRCode] = useState(false);

  const baseURL = 'http://localhost:4000'; 

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  useEffect(() => {
    const fetchRegisteredEvents = async () => {
      try {
        const res = await axios.get(`${baseURL}/api/registers/registered-events/${user.username}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setEvents(res.data);
      } catch (err) {
        console.error('Error fetching registered events:', err);
      }
    };

    if (user?.username) {
      fetchRegisteredEvents();
    }
  }, [user, token]);

  // üëâ ‡πÅ‡∏™‡∏î‡∏á QR Code ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ticket
  const handleShowQRCode = async (eventId) => {
    try {
      setSelectedEventId(eventId);
      const res = await axios.get(`${baseURL}/api/registers/get-ticket-id/${user.username}/${eventId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      const ticketId = res.data.ticketId;
      setSelectedTicketId(ticketId);

      // üîî ‡∏ó‡∏≥‡πÉ‡∏´‡πâ ticket active
      await axios.put(`${baseURL}/api/registers/activate-ticket`, { ticketID: ticketId });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR
      const url = await QRCode.toDataURL(ticketId);
      setQrCodeUrl(url);
      setShowQRCode(true);
    } catch (err) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á QR Code ‡πÑ‡∏î‡πâ:', err);
    }
  };

  // ‚ùå ‡∏õ‡∏¥‡∏î QR popup ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ticket ‡πÄ‡∏õ‡πá‡∏ô inactive
  const handleCloseQRCode = async () => {
    try {
      if (selectedTicketId) {
        await axios.put(`${baseURL}/api/registers/deactivate-ticket`, { ticketID: selectedTicketId });
      }
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô inactive:', error);
    } finally {
      setShowQRCode(false);
      setSelectedTicketId(null);
      setQrCodeUrl('');
    }
  };

  return (
    <div className="registered-events-page">
      <h2 className="events-heading">‡∏á‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</h2>
      {events.length === 0 ? (
        <p className="no-events-text">‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏î ‡πÜ</p>
      ) : (
        events.map((event) => (
          <RegisteredEventCard
            key={event._id}
            eventId={event.eventId}
            registerDate={event.createdAt}
            onShowQRCode={handleShowQRCode}
          />
        ))
      )}

      {showQRCode && selectedTicketId && (
        <QRCodePopup
          ticketId={selectedTicketId}
          qrCodeUrl={qrCodeUrl}
          eventName={events.find(e => e.eventId === selectedEventId)?.eventName}
          onClose={handleCloseQRCode}
        />
      )}
    </div>
  );
};

export default RegisteredEventsPage;
