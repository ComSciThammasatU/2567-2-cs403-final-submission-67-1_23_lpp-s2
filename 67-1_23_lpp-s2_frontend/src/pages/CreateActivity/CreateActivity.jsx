import React, { useState, useContext, useEffect } from 'react';
import axios from 'axios';
import { AuthContext } from '../../Context/AuthContext';
import QuestionBuilder from '../../components/QuestionBuilder/QuestionBuilder';
import './CreateActivity.css';
import Swal from 'sweetalert2';
import { useNavigate } from 'react-router-dom';
import Select from 'react-select';

const CreateActivity = () => {
  const { user, token } = useContext(AuthContext);
  const navigate = useNavigate();
  const baseURL = 'http://localhost:4000';

  useEffect(() => {
    if (!token || !user?.username) {
      Swal.fire({
        icon: 'warning',
        title: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ',
      }).then(() => {
        navigate('/');
      });
    }
  }, [token, user, navigate]);

  const [form, setForm] = useState({
    eventName: '',
    category: 'concert',
    eventDescription: '',
    eventDate: '',
    location: '',
    organizer: '',
    maxRegistrants: 100,
    facultyAccepted: [],
    formQuestions: [],
    image: null,
  });

  const facultyOptions = [
    { value: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', label: 'üîò ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏¥‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏¥‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', label: '‡∏Ñ‡∏ì‡∏∞‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏£‡∏±‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏£‡∏±‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏°‡∏ß‡∏•‡∏ä‡∏ô', label: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏°‡∏ß‡∏•‡∏ä‡∏ô' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏ô‡∏∏‡∏©‡∏¢‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤', label: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏ô‡∏∏‡∏©‡∏¢‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°', label: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°' },
    { value: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏™‡∏´‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£', label: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏™‡∏´‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£' },
    { value: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥‡∏õ‡∏£‡∏µ‡∏î‡∏µ ‡∏û‡∏ô‡∏°‡∏¢‡∏á‡∏Ñ‡πå', label: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥‡∏õ‡∏£‡∏µ‡∏î‡∏µ ‡∏û‡∏ô‡∏°‡∏¢‡∏á‡∏Ñ‡πå' },
    { value: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏õ‡πã‡∏ß‡∏¢ ‡∏≠‡∏∂‡πä‡∏á‡∏†‡∏≤‡∏Å‡∏£‡∏ì‡πå', label: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏õ‡πã‡∏ß‡∏¢ ‡∏≠‡∏∂‡πä‡∏á‡∏†‡∏≤‡∏Å‡∏£‡∏ì‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', label: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ' },
    { value: '‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥‡∏™‡∏¥‡∏£‡∏¥‡∏ô‡∏ò‡∏£', label: '‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥‡∏™‡∏¥‡∏£‡∏¥‡∏ô‡∏ò‡∏£' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏±‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á', label: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏±‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏´‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏´‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥‡∏à‡∏∏‡∏¨‡∏≤‡∏†‡∏£‡∏ì‡πå', label: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥‡∏à‡∏∏‡∏¨‡∏≤‡∏†‡∏£‡∏ì‡πå' },
    { value: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÇ‡∏•‡∏Å‡∏Ñ‡∏î‡∏µ‡∏®‡∏∂‡∏Å‡∏©‡∏≤', label: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÇ‡∏•‡∏Å‡∏Ñ‡∏î‡∏µ‡∏®‡∏∂‡∏Å‡∏©‡∏≤' },
  ];


  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
  };

  const handleFileChange = (e) => {
    setForm({ ...form, image: e.target.files[0] });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!token) {
      Swal.fire({
        icon: 'warning',
        title: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
      });
      return;
    }

    try {
      const formData = new FormData();
      const cleanQuestions = form.formQuestions.map(q => {
        const { _id, ...rest } = q;
        return rest;
      });

      formData.append('eventName', form.eventName);
      formData.append('category', form.category);
      formData.append('eventDescription', form.eventDescription);
      formData.append('eventDate', form.eventDate);
      formData.append('location', form.location);
      formData.append('organizer', form.organizer);
      formData.append('maxRegistrants', form.maxRegistrants);
      formData.append('facultyAccepted', JSON.stringify(form.facultyAccepted));
      formData.append('creatorUsername', user?.username || '');
      formData.append('formQuestions', JSON.stringify(cleanQuestions));
      formData.append('status', 'active');
      if (form.image) formData.append('image', form.image);

      await axios.post(`${baseURL}/api/events/add`, formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'multipart/form-data',
        },
      });

      Swal.fire({
        icon: 'success',
        title: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        navigate('/home');
      });
    } catch (error) {
      console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error);
      Swal.fire({
        icon: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ',
      });
    }
  };

  return (
    <div className="create-activity">
      <h1>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>
      <form onSubmit={handleSubmit} encType="multipart/form-data">
        <input type="text" name="eventName" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" value={form.eventName} onChange={handleChange} required />
        <select name="category" value={form.category} onChange={handleChange}>
          <option value="Concert">‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï</option>
          <option value="Seminar">‡∏™‡∏±‡∏°‡∏ô‡∏≤</option>
          <option value="Exhibition">‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£</option>
          <option value="Sport">‡∏Å‡∏µ‡∏¨‡∏≤</option>
          <option value="Party">‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ</option>
          <option value="Charity">‡∏Å‡∏≤‡∏£‡∏Å‡∏∏‡∏®‡∏•</option>
          <option value="Workshop">‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡∏≠‡∏õ</option>
        </select>
        <textarea name="eventDescription" placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" value={form.eventDescription} onChange={handleChange}></textarea>
        <input type="date" name="eventDate" value={form.eventDate} onChange={handleChange} required />
        <input type="text" name="location" placeholder="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" value={form.location} onChange={handleChange} required />
        <input type="text" name="organizer" placeholder="‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" value={form.organizer} onChange={handleChange} required />
        <input type="number" name="maxRegistrants" value={form.maxRegistrants} onChange={handleChange} />
        <label style={{ fontWeight: 'bold' }}>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ</label>
        <Select
          isMulti
          options={facultyOptions}
          value={facultyOptions.filter(opt => form.facultyAccepted.includes(opt.value))}
          onChange={(selected) => {
            const selectedValues = selected.map(s => s.value);
            if (selectedValues.includes('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')) {
              setForm({ ...form, facultyAccepted: facultyOptions.filter(opt => opt.value !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î').map(opt => opt.value) });
            } else {
              setForm({ ...form, facultyAccepted: selectedValues });
            }
          }}
        />
        <input type="file" name="image" onChange={handleFileChange} />
        <QuestionBuilder formQuestions={form.formQuestions} setFormQuestions={(q) => setForm({ ...form, formQuestions: q })} />
        <button type="submit">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</button>
      </form>
    </div>
  );
};

export default CreateActivity;
