import React, { useState } from 'react';
import axios from 'axios';
import { FaStar, FaRegStar } from 'react-icons/fa'; // ‡πÉ‡∏ä‡πâ React Icons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß
import './RatingPopup.css';

const EventRatingPopup = ({ eventId, username, token, onClose, onSuccess }) => {
  const [rating, setRating] = useState(0); // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const [comment, setComment] = useState(''); // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
  const [submitted, setSubmitted] = useState(false); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  const [formUrl, setFormUrl] = useState(''); // ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°

  const baseURL = 'http://localhost:4000';

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const handleSubmit = async () => {
    try {
      console.log("üßæ Sending rating:", { username, rating, comment });

      const res = await axios.post(
        `${baseURL}/api/rates/${eventId}/rate`,
        {
          username, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string
          rating,   // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô number (1‚Äì5)
          comment,  // optional
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      // ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Google Form ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
      const eventRes = await axios.get(`http://localhost:4000/api/events/event/${eventId}`);
      const evaluationUrl = eventRes.data.evaluationFormUrl;

      setFormUrl(evaluationUrl);
      setSubmitted(true);
      onSuccess(); // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ parent ‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    } catch (error) {
      console.error("‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏≤‡∏ß
  const handleStarClick = (ratingValue) => {
    setRating(ratingValue); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  };

  return (
    <div className="RatingPopup-overlay">
      <div className="RatingPopup-box">
        <h3>‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>

        {submitted ? (
          <>
            <p>‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß!</p>
            {formUrl && (
              <a href={formUrl} target="_blank" rel="noopener noreferrer" className="RatingPopup-button-orange">
                üëâ ‡πÑ‡∏õ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
              </a>
            )}
            <button className="popup-close-btn" onClick={onClose}>‡∏õ‡∏¥‡∏î</button>
          </>
        ) : (
          <>
            <div className="RatingPopup-star-rating">
              {[1, 2, 3, 4, 5].map((star) => (
                <span
                  key={star}
                  onClick={() => handleStarClick(star)}
                  className="star"
                >
                  {rating >= star ? <FaStar /> : <FaRegStar />}
                </span>
              ))}
            </div>

            <label>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)</label>
            <textarea
              rows={3}
              value={comment}
              onChange={(e) => setComment(e.target.value)}
            />

            <div className="RatingPopup-popup-buttons">
              <button onClick={handleSubmit} disabled={rating === 0}>‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</button>
              <button onClick={onClose}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default EventRatingPopup;
